(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// let worker = new Worker('htmlWorker.js');
//
// function exportHTML(){
//   let htmlStr = window.document.body.outerHTML;
//   let dType = document.doctype.name;
//   worker.postMessage({htmlStr: htmlStr, dType: dType });
// };
// exportHTML();
// onmessage = function(){};

//Things to handle
  //Bind event listeners to the window for our code
  //Bind dom mutations
  //Get all of the CSS for each node

var GrabExternalSheets = function() {
  this.imgTags = [];
  this.cssSheetsArr = [];
  this.externalScripts = [];
  this.localScripts = [];
};

GrabExternalSheets.prototype.getTags = function() {
    var listofImgs = document.getElementsByTagName("img"),
    imgUrls = [],
    listImgLng = listofImgs.length;

    for(var i = 0; i < listImgLng; i++){
      this.imgTags.push(listofImgs[i].src);
    }
};

GrabExternalSheets.prototype.getStyleSheetsLink = function() {
  var cssSheetsArr = [],
  listofStyleSheets = document.getElementsByTagName("link"),
  listLng = listofStyleSheets.length;

  for(var i = 0; i < listLng; i++) {
    console.log("what is it?", listofStyleSheets[i]);
    cssSheetsArr.push(listofStyleSheets[i].href);
  }
  this.cssSheetsArr.concat(cssSheetsArr);
  console.log("What is css getStyleSheetsLink", cssSheetsArr);
};


GrabExternalSheets.prototype.getStyleSheetsStyle = function() {
  var cssSheetsArr = [],
  listofStyleSheets = document.getElementsByTagName("style"),
  listLng = listofStyleSheets.length;

  for(var i = 0; i < listLng; i++) {
    cssSheetsArr.push(listofStyleSheets[i].outerHTML);
  }
  this.cssSheetsArr.concat(cssSheetsArr);
  console.log("What is css getStyleSheetsStyle", cssSheetsArr);
};

GrabExternalSheets.prototype.getScripts = function() {
  var scriptUrls = [],
  listofScripts = document.getElementsByTagName("script"),
  listScriptLng = listofScripts.length,
  scriptData;

  for(var i = 0; i < listScriptLng; i++){
    if(listofScripts[i].src){
      scriptData = listofScripts[i].src;
    } else {
      scriptData = listofScripts[i].outerHTML;
    }
    this.externalScripts.push(scriptData);
  }
};

module.exports = GrabExternalSheets;
},{}],2:[function(require,module,exports){
var scroll = require('./scroll.js');
var ObtainInput = require('./obtainInput.js');
var GrabStyles = require('./grabStyles.js');
var utils = require('./utils.js');


var test = new ObtainInput();
  // grabAllTags;
  // addListeners;
console.log("what is t", test.grabAllTags());
console.log("Add listeners", test.addListeners());

var test2 = new GrabStyles();

console.log("gettags",test2.getTags());
console.log("getStyleSheetsLink",test2.getStyleSheetsLink());
console.log("getStyleSheetsStyle",test2.getStyleSheetsStyle());
console.log("getStyleSheetsStyle",test2.getScripts());





},{"./grabStyles.js":1,"./obtainInput.js":3,"./scroll.js":4,"./utils.js":5}],3:[function(require,module,exports){
var utils = require("./utils.js");


 var GrabInput = function() {
    this.listOfInputs = ['input', 'textarea', 'select'];
    this.inputNodes = [];

  };

  GrabInput.prototype.grabAllTags = function() {
    var listOfInputs = ['input', 'textarea', 'select'], inputNodesFound = [], listOfTagsLeng = listOfInputs.length, node;

    for (var i = 0; i < listOfTagsLeng; i++) {
      node = document.getElementsByTagName(listOfInputs[i]);
      node = Array.prototype.slice.call(node);
      inputNodesFound = inputNodesFound.concat(node);
    }
    this.inputNodes = inputNodesFound;
  };

  GrabInput.prototype.addListeners = function() {
    var inputNodeLeng = this.inputNodes.length, el;

    for (var i = 0; i < inputNodeLeng; i++) {
      el = this.inputNodes[i];
      // utilityfunctions.addListener
      if(el.nodeName === "SELECT"){
        utils.addListener("change", el, this.extractChange);
      } else {
        utils.addListener("keydown", el, this.extractText);
      }
    }
    console.log("testing", utils.xPath(el));
  };

  GrabInput.prototype.extractText = function(e){
    if(e){
      console.log("what is e", e);
    }
  };
  GrabInput.prototype.extractChange = function(e){
    if(e){
      // console.log("what is e", e);
    }
  };

module.exports = GrabInput;







},{"./utils.js":5}],4:[function(require,module,exports){
var utils = require("./utils.js");

var DocumentWatcher = function(){
  this.listOfInputs = ['input', 'textarea', 'select'];
  this.inputNodes = [];
};

DocumentWatcher.prototype.grabAllTags = function() {
  var inputNodesFound = [],listOfTagsLeng = this.listOfInputs.length;

  for (var i = 0; i < listOfTagsLeng; i++) {
    this.inputNodes.concat(document.getElementsByTagName(this.listOfInputs[i]));
  }
};

DocumentWatcher.prototype.bindMainEvents = function(){
    utils.addListener("resize", resize);
};



DocumentWatcher.prototype.addListeners = function() {
  var inputNodeLeng = this.inputNodes.length;

  for (var i = 0; i < inputNodeLeng; i++) {
    // input
    // utilityfunctions.addListener

  }
};

DocumentWatcher.prototype.updateScroll = function(el){

};

DocumentWatcher.prototype.documentSize = function(){
  var windowScreen = window.screen.width,
  windowHeight = window.screen.height;
};

DocumentWatcher.prototype.resize = function(e){
  

};




DocumentWatcher.prototype.xPath = function(el){
  var xpath = '';
  var pos, el2;
  var posText;

  while(el) {
    pos = 0;
    el2 = el;
    while(el2) {
      if (el2.nodeType === 1 && el2.nodeName === el.nodeName) { // If it is ELEMENT_NODE of the same name
        pos += 1;
      }
      el2 = tempitem2.previousSibling;
    }
    posText = "";
    if(pos > 0) {
      posText = "[" + pos + "]";
    }

    xpath = "" + el.nodeName + "" + ( el.id === null ? (pos > 0 ? posText : "" ) + "" : "[@id='" + el.id + "']" + "[" + pos + "]") + "/" + xpath;

    el = el.parentNode;
  }
console.log("what is xpath", xpath);
  // xpath = '/*'+"[name()='"+xml.documentElement.nodeName+"' and namespace-uri()='"+(el.namespaceURI===null?'':el.namespaceURI)+"']"+'/'+xpath;
  // xpath = xpath.replace(/\/$/, '');
  return xpath;
};

module.exports = DocumentWatcher;

},{"./utils.js":5}],5:[function(require,module,exports){
module.exports = (function(){

  var polyBind = function(func, context){
    var arr = Array.prototype.slice.call(arguments, 2);
    return function(){
      var args = Array.prototype.slice.call(arguments);
      var fin = arr.concat(args);
      return func.apply(context, fin);
    };
  };

  var addListener = function(eventName, node, result){
    node.addEventListener(eventName, result);
  };

  var addListenerById = function(eventName, id, result){
    if(!id){
      console.log("No tag was added in addListenerById, Id is :", id);
      return;
    }
    var node = document.getElementById(id);
    node.addEventListener(eventName, result);
  };

  var addListenerByTag = function(eventName, id, result){
    if(!tag){
      console.log("No tag was added in addListenerByTag, Tag is :",tag);
      return;
    }
    var node = document.getElementById(id);
    node.addEventListener(eventName, result);
  };

  var xPath = function(el){
    var xpath = '';
    var pos, el2;
    var posText;
    debugger;
    while(el) {
      console.log("waht is the el id", el.id);
      pos = 0;
      el2 = el;
      while(el2) {
        if (el2.nodeType === 1 && el2.nodeName === el.nodeName) { // If it is ELEMENT_NODE of the same name
          pos += 1;
        }
        el2 = el2.previousSibling;
      }
      posText = pos > 0 ? "[" + pos + "]" : "";
      console.log("waht is el", el, el.id);
      if(el){
        xpath = "" + el.nodeName + "" + ( el.id !== true ? posText + "" : "[@id='" + el.id + "']" + posText) + "/" + xpath;
      }
      el = el.parentNode;
    }
    // xpath = '/*'+"[name()='"+xml.documentElement.nodeName+"' and namespace-uri()='"+(el.namespaceURI===null?'':el.namespaceURI)+"']"+'/'+xpath;
    // xpath = xpath.replace(/\/$/, '');
    console.log("xpath", xpath);
    return xpath;
  };

  return {
    polyBind : polyBind,
    addListener : addListener,
    addListenerById : addListenerById,
    addListenerByTag : addListenerByTag,
    xPath : xPath
  };

})();
},{}]},{},[2]);
