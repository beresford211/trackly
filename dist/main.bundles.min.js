(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function(){

  var postData = function(eventData){
   console.log("lets just pretend it sends", eventData);
  };

  return {
    postData : postData
  };

})();

},{}],2:[function(require,module,exports){
var utils = require("./utils.js");
var storage = require("./storage.js");

var DocumentWatcher = function(){
  this.inputNodes = [];
};

DocumentWatcher.prototype.grabHTML = function() {
  var isDocTypeStr = typeof document.docType === "string" ? true : false;
  this.htmlStr = document.body.innerHTML;

};

DocumentWatcher.prototype.bindMainEvents = function() {
  utils.addListener(window, "resize", this.windowSize);
  utils.addListener(window, "scroll", this.updateScroll, true);
  utils.addListener(window, "click", this.clickCapture);
  utils.addListener(window, "beforeunload", utils.removeListeners);
};

DocumentWatcher.prototype.updateScroll = function(e) {
  var eventData = {};

  eventData.scrollTop = window.pageYOffset;
  eventData.scrollLeft = window.pageXOffset;
  eventData.timeStamp = e.timeStamp;
  storage.addToLocalStorage(eventData);
};

DocumentWatcher.prototype.windowSize = function() {
  var eventData = {};

  eventData.windowScreen = document.documentElement.clientWidth;
  eventData.windowHeight = document.documentElement.clientHeight;
  eventData.windowSizeTime = Math.floor(Date.now() / 1000);
  storage.addToLocalStorage(eventData);
};

DocumentWatcher.prototype.clickCapture = function(e){
  var eventData = {}, doc = e.srcElement.getBoundingClientRect();

  eventData.timeStamp = e.timeStamp;
  eventData.xCoordinate = doc.left + e.pageXOffset;
  eventData.xpath = this.xPath(e.target.activeElement);
  eventData.yCoordinate = doc.top + e.pageYOffset;
  storage.addToLocalStorage(eventData);
};

module.exports = DocumentWatcher;

},{"./storage.js":8,"./utils.js":9}],3:[function(require,module,exports){
var storage = require("./storage.js");

module.exports = (function () {
    var instance, docBody = document.getElementsByTagName("body");

    function createInstance() {
        var object = new new MutationObserver(function(mutations) {
          var nodes = [];
          storage.addToLocalStorage();
          mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                  var count = list.children.length;
                  list.children[count-1].innerHTML = "Element " + count + " has been injected!";
            }
          });
        });
        return object;
     }

    return {
        getInstance: function () {
            if (!instance) {
                instance = createInstance();
                instance.observe(docBody, { attributes: true, childList: true, characterData: true });
            }
            return instance;
        },
        updateInstance: function() {

        }
    };
})();




var MutationObserver = window.MutationObserver ||
        window.WebKitMutationObserver ||
        window.MozMutationObserver;

  var observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
            var count = list.children.length;
          list.children[count-1].innerHTML =
              "Element " + count + " has been injected!";
      }
    });
  });

},{"./storage.js":8}],4:[function(require,module,exports){
// let worker = new Worker('htmlWorker.js');
//
// function exportHTML(){
//   let htmlStr = window.document.body.outerHTML;
//   let dType = document.doctype.name;
//   worker.postMessage({htmlStr: htmlStr, dType: dType });
// };
// exportHTML();
// onmessage = function(){};

//Things to handle
  //Bind event listeners to the window for our code
  //Bind dom mutations
  //Get all of the CSS for each node

var GrabExternalSheets = function() {
  this.imgTags = [];
  this.cssSheetsArr = [];
  this.externalScripts = [];
  this.localScripts = [];
};

GrabExternalSheets.prototype.getTags = function() {
    var listofImgs = document.getElementsByTagName("img"),
    imgUrls = [],
    listImgLng = listofImgs.length;

    for(var i = 0; i < listImgLng; i++){
      this.imgTags.push(listofImgs[i].src);
    }
};

GrabExternalSheets.prototype.getStyleSheetsLink = function() {
  var cssSheetsArr = [],
  listofStyleSheets = document.getElementsByTagName("link"),
  listLng = listofStyleSheets.length;

  for(var i = 0; i < listLng; i++) {
    console.log("what is it?", listofStyleSheets[i]);
    cssSheetsArr.push(listofStyleSheets[i].href);
  }
  this.cssSheetsArr.concat(cssSheetsArr);
  console.log("What is css getStyleSheetsLink", cssSheetsArr);
};


GrabExternalSheets.prototype.getStyleSheetsStyle = function() {
  var cssSheetsArr = [],
  listofStyleSheets = document.getElementsByTagName("style"),
  listLng = listofStyleSheets.length;

  for(var i = 0; i < listLng; i++) {
    cssSheetsArr.push(listofStyleSheets[i].outerHTML);
  }
  this.cssSheetsArr.concat(cssSheetsArr);
  console.log("What is css getStyleSheetsStyle", cssSheetsArr);
};

GrabExternalSheets.prototype.getScripts = function() {
  var scriptUrls = [],
  listofScripts = document.getElementsByTagName("script"),
  listScriptLng = listofScripts.length,
  scriptData;

  for(var i = 0; i < listScriptLng; i++){
    if(listofScripts[i].src){
      scriptData = listofScripts[i].src;
    } else {
      scriptData = listofScripts[i].outerHTML;
    }
    this.externalScripts.push(scriptData);
  }
};

module.exports = GrabExternalSheets;
},{}],5:[function(require,module,exports){
var scroll = require('./documentWatcher.js');
var ObtainInput = require('./obtainInput.js');
var GrabStyles = require('./grabStyles.js');
var nd = require('./domMutations.js');
var Pointer = require('./pointerWatcher.js');
var utils = require('./utils.js');


//
var test = new ObtainInput();
  // grabAllTags;
  // addListeners;
console.log("what is t", test.grabAllTags());
console.log("Add listeners", test.addListeners());
//
var test2 = new GrabStyles();


console.log("gettags",test2.getTags());
console.log("getStyleSheetsLink",test2.getStyleSheetsLink());
console.log("getStyleSheetsStyle",test2.getStyleSheetsStyle());
console.log("getStyleSheetsStyle",test2.getScripts());


var poi = new Pointer();
console.log("bound pointer", poi.bindPointer());



},{"./documentWatcher.js":2,"./domMutations.js":3,"./grabStyles.js":4,"./obtainInput.js":6,"./pointerWatcher.js":7,"./utils.js":9}],6:[function(require,module,exports){
var utils = require("./utils.js");
var data = require("./data.js");
var storage = require("./storage.js");

 var GrabInput = function() {
    this.inputNodes = [];
    this.prevInputValue = null;
    this.prevOption = null;
  };

 GrabInput.prototype.grabAllTags = function() {
    var listOfInputs = ['input', 'textarea', 'select'], inputNodesFound = [], listOfTagsLeng = listOfInputs.length, node;

    for (var i = 0; i < listOfTagsLeng; i++) {
      node = document.getElementsByTagName(listOfInputs[i]);
      node = Array.prototype.slice.call(node);
      inputNodesFound = inputNodesFound.concat(node);
    }
    this.inputNodes = inputNodesFound;
 };

 GrabInput.prototype.addListeners = function() {
    var inputNodeLeng = this.inputNodes.length, el;

    for (var i = 0; i < inputNodeLeng; i++) {
      el = this.inputNodes[i];
      if(el.nodeName === "SELECT") {
        utils.addListener(el, "change", this.extractChange);
      } else {
        utils.addListener(el, "keydown", this.extractText);
      }
    }
    console.log("testing", utils.xPath(el));
 };

 GrabInput.prototype.extractChange = function(e) {
    var option = e.target.value, timeStamp = e.timeStamp, extractData = {};

    if(option !== this.prevOption) {
      extractData.option = option;
      extractData.timeStamp = timeStamp;
      extractData.xpath = utils.xPath(e.srcElement);
    }

    this.prevOption = option;
 };

 GrabInput.prototype.extractText = function(event) {
  var inputValue = event.target.value, timeStamp = event.timeStamp, extractData = {};
    if(!this.prevInputValue || (this.prevInputValue !== inputValue)) {
      extractData.timeStamp = timeStamp;
      extractData.inputValue = inputValue;
      extractData.xpath = utils.xPath(event.srcElement);
      data.postData(extractData);
    }
    this.prevInputValue = inputValue;
    storage.addToLocalStorage(extractData);
 };

module.exports = GrabInput;







},{"./data.js":1,"./storage.js":8,"./utils.js":9}],7:[function(require,module,exports){
var utils = require("./utils.js");
var storage = require("./storage.js");

var PointerWatcher = function(){
  // this.nodesCollected = [];
};

PointerWatcher.prototype.bindPointer = function() {
  utils.addListener(window.document.body, "pointermove", utils.throttle(this.captureMovements, 35, this));
};

PointerWatcher.prototype.captureMovements = function(e) {
  var eventData = {};
    if(e.type === "pointermove") {
      eventData.clientX = e.clientX;
      eventData.clientY = e.clientY;
      eventData.timeStamp = e.timeStamp;
      storage.addToLocalStorage(eventData);
    }
};

module.exports = PointerWatcher;

},{"./storage.js":8,"./utils.js":9}],8:[function(require,module,exports){
var utils = require("./utils.js");
var data = require("./data.js");

module.exports = (function() {
  var supportsStorage = null, spaceTaken = 0, isAvailable = window.localStorage || 0;
  supportsStorage = isAvailable !== false ? true : false;

  var addToLocalStorage = function(addData) {
    var trklyData, tempStorage;
    if(supportsStorage) {
      try {
        tempStorage = localStorage.getItem("trackly") || "";
        tempStorage += JSON.stringify(addData);
        localStorage.setItem("trkly", tempStorage);
        this.localStorageUsed();
      } catch (e) {

        if (e.code == 22 || e.code == 1014) {
          console.warn("Storage is full we need to empty it");
          trklyData = localStorage.getItem("trkly");
          data.postData(trklyData);
          localStorage.removeItem("trkly");
        }
      }
    }
  };

  var localStorageUsed = function() {
      var total = 0;
      for (var x in localStorage) {
          var amount = (localStorage[x].length * 2) / 1024 / 1024;
          total += amount;
      }
      spaceTaken = total.toFixed(2);
  };

  return {
    localStorageUsed : localStorageUsed,
    addToLocalStorage : addToLocalStorage
  };

})();
},{"./data.js":1,"./utils.js":9}],9:[function(require,module,exports){
module.exports = (function(){

  var polyBind = function(func, context) {
    var arr = Array.prototype.slice.call(arguments, 2);

    return function() {
      var args = Array.prototype.slice.call(arguments);
      var fin = arr.concat(args);
      return func.apply(context, fin);
    };
  };

  var addListener = function(node, eventName, result) {
    node.addEventListener(eventName, result);
  };

  var addListenerById = function(eventName, id, result) {
    if(!id){
      console.log("No tag was added in addListenerById, Id is :", id);
      return;
    }
    var node = document.getElementById(id);
    node.addEventListener(eventName, result);
  };

  var addListenerByTag = function(eventName, tag, result) {
    if(!tag){
      console.log("No tag was added in addListenerByTag, Tag is :",tag);
      return;
    }
    var node = document.getElementById(tag);
    node.addEventListener(eventName, result);
  };

  var xPath = function(el){
    var xpath = '';
    var pos, el2, posText, flag;
    while(el) {
      pos = 0;
      el2 = el;
      flag = false;
      while(el2) {
        if (el2.nodeType === 1 && el2.nodeName === el.nodeName && flag) { // If it is ELEMENT_NODE of the same name
          pos += 1;
        }
        flag = true;
        el2 = el2.previousSibling;
      }
      posText = pos > 0 ? "[" + pos + "]" : "";
      if(el){
        xpath = "" + el.nodeName + "" + ( el.id !== true ? posText + "" : "[@id='" + el.id + "']" + posText) + "/" + xpath;
      }
      el = el.parentNode;
    }
    console.log("xpath", xpath);
    return xpath;
  };

  var throttle = function(fn, threshhold, scope) {
    threshhold = threshhold !== false ? threshhold : (threshhold = 250);
    var last,
        timerId;
        return function () {
          var context = scope || this,
            now = +new Date(),
            args = arguments;

    if (last && now < last + threshhold) {
      clearTimeout(timerId);
      timerId = setTimeout(function () {
        last = now;
        fn.apply(context, args);
      }, threshhold);
    } else {
      last = now;
      fn.apply(context, args);
    }
  };
};

  return {
    throttle : throttle,
    polyBind : polyBind,
    addListener : addListener,
    addListenerById : addListenerById,
    addListenerByTag : addListenerByTag,
    xPath : xPath
  };

})();
},{}]},{},[5]);
